# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['conceptnet_lite']

package_data = \
{'': ['*']}

install_requires = \
['langcodes>=1.4,<2.0', 'pony>=0.7.10,<0.8.0', 'pySmartDL>=1.3,<2.0']

setup_kwargs = {
    'name': 'conceptnet-lite',
    'version': '0.1.8',
    'description': 'Python library to work with ConceptNet offline without the need of PostgreSQL',
    'long_description': '# conceptnet-lite\n\nConceptnet-lite is a Python library for working with ConceptNet offline without the need for PostgreSQL.\n\nThe basic usage is as follows. \n\n## Loading the database object\n\nConceptNet releases happen once a year. You can build your own database from an assertions file, but if there is a pre-built file it will be faster to just download that one. Here is the [database file](todo) for ConceptNet 5.7 release. \n\n```python\nfrom conceptnet_lite import ConceptNet, Label, Language\n\ncn = ConceptNet(path=\'/path/to/conceptnet.db\')\n```\n\n## Building the database for a new release.\n\nThe assertion files for ConceptNet are provided [here](https://github.com/commonsense/conceptnet5/wiki/Downloads). \n\n(building instructions TBA)\n\nThe structure of the resulting database is shown [here](https://github.com/ldtoolkit/conceptnet-lite/blob/master/docs/er-diagram.pdf) \n\n## Accessing concepts\n\nTo work with the ConceptNet database you will need to use the `.query()` context manager, which enables the [database sessions](https://docs.ponyorm.org/transactions.html#working-with-db-session). All operations with the database need to be performed inside the `with cn.query():` context.\n\nConcepts objects are created by looking for every entry that matches the input string exactly. If none is found, the concepts object will be returned as `None`. \n\n```python\nwith cn.query():\n    cat_concepts = Label.get(text=\'cat\').concepts  #\n    for c in cat_concepts:\n        print("    Concept URI:", c.uri)\n        print("    Concept text:", c.label.text) \n```\n\n`concept.uri` provides access to ConceptNet URIs, as described [here](https://github.com/commonsense/conceptnet5/wiki/URI-hierarchy). You can also retrieve only the text of the entry by `concept.label.text`.\n\n## Working with languages\n\nYou can limit the languages to search for matches. Label.get() takes an optional `language` attribute that is expected to be a language object created by the [langcodes library](https://github.com/LuminosoInsight/langcodes).\n\n```python\nwith cn.query():\n    english = Language.get(name=\'en\')\n    cat_concepts = Label.get(text=\'cat\', language=english).concepts  #\n    for c in cat_concepts:\n        print("    Concept URI:", c.uri)\n        print("    Concept text:", c.label.text) \n        print("    Concept language:", c.language.name)\n```\n\n## Querying edges between concepts\n\nTo retrieve the set of relations between two concepts, you need to create the concept objects (optionally specifying the language as described above). `cn.edges_between()` method retrieves all edges between the specified concepts. You can access its URI and a number of attributes, as shown below.\n\nSome ConceptNet relations are symmetrical: for example, the antonymy between *white* and *black* works both ways. Some relations are asymmetrical: e.g. the relation between *cat* and *mammal* is either hyponymy or hyperonymy, depending on the direction. The `two_way` argument lets you choose whether the query should be symmetrical or not.\n\n```python\nwith cn.query():\n    english = Language.get(name=\'en\')\n    introvert_concepts = Label.get(text=\'introvert\', language=english).concepts\n    extrovert_concepts = Label.get(text=\'extrovert\', language=english).concepts\n    for e in cn.edges_between(introvert_concepts, extrovert_concepts,\n    two_way=False):\n        print("  Edge URI:", e.uri)\n        print(e.relation.name, e.start.label.text, e.end.label.text, e.etc)\n```\n* **e.relation.name**: the name of ConceptNet relation. Full list [here](https://github.com/commonsense/conceptnet5/wiki/Relations).\n\n* **e.start.label.text, e.end.label.text**: the source and the target concepts in the edge\n\n* **e.etc**: the ConceptNet [metadata](https://github.com/commonsense/conceptnet5/wiki/Edges) dictionary contains the source dataset, sources, weight, and license. For example, the introvert:extrovert edge for English contains the following metadata:\n\n```\n{\n\t\'dataset\': \'/d/wiktionary/en\',\n\t\'license\': \'cc:by-sa/4.0\',\n\t\'sources\': [{\n\t\t\'contributor\': \'/s/resource/wiktionary/en\',\n\t\t\'process\': \'/s/process/wikiparsec/2\'\n\t}, {\n\t\t\'contributor\': \'/s/resource/wiktionary/fr\',\n\t\t\'process\': \'/s/process/wikiparsec/2\'\n\t}],\n\t\'weight\': 2.0\n}\n```\n\n## Accessing all relations for a given concept\n\nYou can also retrieve all relations between a given concept and all other concepts, with the same options as above:\n\n```python\nwith cn.query():\n    english = Language.get(name=\'en\')\n    for e in cn.edges_for(Label.get(text=\'introvert\', language=english, same_language=True).concepts):\n        print("  Edge URI:", e.uri)\n        print(e.relation.name, e.start.label.text, e.end.label.text, e.etc)\n```\n\nThe only difference is that since the other concepts are not specified, it is possible to get edges to concepts in languages other than the source concept language. By default this option is off, but if you need to retrieve, say, Chinese antonyms of an English word, you can set `same_language=False`.\n\n## Accessing concept edges with a given relation direction\n\nYou can also query the relations that have a specific concept as target or source. This is achieved with `concept.edges_out` and `concept.edges_in`, as follows:\n\n```python\nwith cn.query():\n    english = Language.get(name=\'en\')\n    cat_concepts = Label.get(text=\'introvert\', language=english).concepts  #\n    for c in cat_concepts:\n        print("    Concept text:", c.label.text) # shall we also contract this to c.text?\n        if c.edges_out:\n            print("      Edges out:")\n            for e in c.edges_out:\n                print("        Edge URI:", e.uri)\n                print("        Relation:", e.relation.name)\n                print("        End:", e.end.label.text)\n        if c.edges_in:\n            print("      Edges in:")\n            for e in c.edges_in:\n                print("        Edge URI:", e.uri)\n                print("        Relation:", e.relation.name)\n                print("        End:", e.end.label.text)\n```\n\n\n# Traversing all the data for a language\n \nYou can go over all concepts for a given language. For illustration, let us try Avestan, a "small" language with the code "ae" and vocab size of 371, according to the [ConceptNet language statistics](https://github.com/commonsense/conceptnet5/wiki/Languages). \n \n```python\nwith cn.query():\n    mylanguage = Language.get(name=\'ae\')\n    for l in mylanguage.labels:\n        print("  Label:", l.text)\n        for c in l.concepts:\n            print("    Concept URI:", c.uri)\n            if c.edges_out:\n                print("      Edges out:")\n                for e in c.edges_out:\n                    print("        Edge URI:", e.uri)\n            if c.edges_in:\n                print("      Edges in:")\n                for e in c.edges_in:\n                    print("        Edge URI:", e.uri)\n```\n\nTodo:\n\n- [ ] add database file link \n- [ ] describe how to build the database\n- [ ] add sample outputs',
    'author': 'Roman Inflianskas',
    'author_email': 'infroma@gmail.com',
    'url': 'https://github.com/ldtoolkit/conceptnet-lite',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
